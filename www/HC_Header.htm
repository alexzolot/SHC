<!doctype HTML>
<meta charset = 'utf-8'>
<html>
<title>AZ hCharts w blocks</title>
    <!--  script src="https://code.jquery.com/jquery-1.11.3.min.js" type="text/javascript"></script -->
    <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
 
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/data.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>

<!-- Additional files for the Highslide popup effect --> 
<!--  script type="text/javascript" src="http://www.highcharts.com/media/com_demo/highslide-full.min.js"></script -->
<script type="text/javascript" src="https://www.highcharts.com/highslide/highslide-full.min.js"></script>
<script type="text/javascript" src="https://www.highcharts.com/highslide/highslide.config.js" charset="utf-8"></script>

<link rel="stylesheet" type="text/css" href="https://www.highcharts.com/media/com_demo/highslide.css" />
<link rel="stylesheet" type="text/css" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css"/>

<script> 
//  src="https://dl.dropboxusercontent.com/u/37458038/csv.tmp/BHighchartsClass.TS.js">
function cl(){s=''; for (var i = 0; i < arguments.length; i++)  s+= ',  ' + arguments[i];
    console.log(s)
}


var tooltip1={
          shared: true, crosshairs: true,
          useHTML: true,
         // headerFormat:'<small>{point.key.format("%e %b %Y")}</small> <table>',
          headerFormat:'<small>{point.key}</small> <table>',
          pointFormat: '<tr><td style="color: {series.color}">{series.name}: </td>' +
                           '<td style="text-align: right"><b>{point.y}</b></td></tr>',
          footerFormat: '</table>',
          valueDecimals: 5
      };
  
  function unzoom() {
      $('.hCha').each(function() {ch= $(this).highcharts();
          ch.options.chart.isZoomed = false;
          ch.xAxis[0].setExtremes(null, null);
      })
  }
  
  //catch mousemove event and have all charts' crosshairs move along indicated values on x axis
  function syncronizeCrossHairs(chart) {
      var container = $(chart.container),
          x, y, isInside, report;

      container.mousemove(function (evt) {
          offset = $(this).offset();  
          x = evt.clientX - chart.plotLeft - offset.left;
          y = evt.clientY - chart.plotTop - offset.top;
          x0= evt.clientX; //az

          container.closest(".HC_Block").find('.hCha').each(function() {
              ch= $(this).highcharts();
	          ch.xAxis[0].removePlotLine("myPlotLineId");
	          ch.xAxis[0].addPlotLine({
	              value: chart.xAxis[0].translate(x, true),
	              width: 1,
	              color: 'red',  //dashStyle: 'dash',                   
	              id: "myPlotLineId"
	          });
	
	      })
      });
  }
  
  
  //compute a reasonable tick interval given the zoom range -
  //have to compute this since we set the tickIntervals in order
  //to get predictable synchronization between 3 charts with
  //different data.
  function computeTickInterval(xMin, xMax) {
      var zoomRange = xMax - xMin;
      currentTickInterval = zoomRange <= 2 ? 0.5 : zoomRange < 20 ? 1 : zoomRange < 100 ? 5 : Math.round(zoomRange/20);
  }

  
  function afterSetExtremes(o) {
      if (!o.chart.options.chart.isZoomed) {
          var xMin = o.chart.xAxis[0].min;
          var xMax = o.chart.xAxis[0].max;
          var zmRange = computeTickInterval(xMin, xMax);

         $(o.chart.container).closest(".HC_Block").find('.hCha').each(function() {
             ch= $(this).highcharts();
             ch.xAxis[0].options.tickInterval = zmRange;
             ch.xAxis[0].isDirty = true;                                    

             ch.options.chart.isZoomed = true;  //az xxx: maybe if(i!=1)
             ch.xAxis[0].setExtremes(xMin, xMax, true);
             ch.options.chart.isZoomed = false;
         })
      }
  }
  
  
  chOptions0= {
          aBlock:'block1', dragg:true,
          chart: {renderTo: 'hChart0', zoomType: 'xy'},
          data: {csv: ''},
          title: {text: 'Title0'},
          subtitle: {text: ''},

          xAxis: {
              tickInterval: 7 * 24 * 3600 * 1000, // one week
              tickWidth: 0,
              gridLineWidth: 1,
              labels: {
                  align: 'left',
                  x: 3,
                  y: -3
              },
              events: {afterSetExtremes: function () {afterSetExtremes(this)}}
          },

          yAxis: [{ // left y axis
              title: {text: 'YY'},
              labels: {
                  align: 'left',
                  x: 3, y: 16,
                  format: '{value:.,0f}'
              },
              showFirstLabel: false
          }
//            , { // right y axis - conflicts with log(Oy)
//                linkedTo: 0, gridLineWidth: 0, opposite: true, title: { text: null},
//                labels: {align: 'right', x: -3, y: 16, format: '{value:.,0f}' },
//                showFirstLabel: false
//            }
          ],

          legend: {
              align: 'left',
              verticalAlign: 'top',
              y: 20,
              floating: true,
              borderWidth: 0
          },
          tooltip: tooltip1,  // : { shared: true, crosshairs: true },
          
          exporting: {
              buttons: {
                  hideButton: {
                      text: 'x',
                      onclick: function () {
                          $('#' + this.renderTo.id).slideUp(); 
                      }
                  }
                 , logButton: {
                      text: 'lnY',
                      onclick: function () {
                          var yaa=$('#' + this.renderTo.id).highcharts().yAxis, il= yaa[0].isLog;
                          cl('logButton:  il=' + il);
                          // yaa[1].update({ type: il? 'linear':'logarithmic'}); // right axis
                          yaa[0].update({ type: il? 'linear':'logarithmic'}); // left axis
                      }
                   }
             }
          },

          plotOptions: {
              series: {
                  cursor: 'pointer',
                  point: {
                      events: {
                          click: function (e) {
                              hs.htmlExpand(null, {
                                  pageOrigin: {
                                      x: e.pageX || e.clientX,
                                      y: e.pageY || e.clientY
                                  },
                                  headingText: this.series.name,
                                  maincontentText: Highcharts.dateFormat('%A, %b %e, %Y', this.x) + ':<br/> value= ' + this.y ,
                                  width: 200
                              });
                          }
                      }
                  },
                  marker: { lineWidth: 1 }
              }
          }

          , series: [{
             // name: 'zz',
              lineWidth: 1,
              marker: {radius: 3}
          } ]
      };

  
  var controllingChart;
  var myPlotLineId = "myPlotLine";
  var defaultTickInterval = 5;
  var currentTickInterval = defaultTickInterval;

  //az
  var cha= [],  i= 0, iChart= 0, iBlock= 0, nCha= 0; //charts
  var BlocksHC= BlocksHC || {};  
  // var BlockHC= {};   


</script>  
  


<!-- body -->

 <!--  h3>AZ Highcharts w block</h3 -->   

<div id="hCharts"></div>
<button id="btn">Unzoom</button> 

<!--_htm <!-- -->

<script>

$(function () {
    Highcharts.setOptions({
        colors: ['#058DC7', '#24CBE5', '#ED561B', '#FF9655','#50B432', '#6AF9C4', '#BBBE00', '#DDDF00', '#CCA243', '#FFF263',  '#64E572', '#FF9655', '#FFF263']
    });
    
    $('#btn').click(function(){unzoom()});
    

   // _js;
    
});
</script> 

<!-- /body -->
</html>
